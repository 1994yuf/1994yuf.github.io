(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{368:function(a,t,e){"use strict";e.r(t);var r=e(42),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"gc-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc-优化"}},[a._v("#")]),a._v(" GC 优化")]),a._v(" "),e("h2",{attrs:{id:"gc-优化的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc-优化的过程"}},[a._v("#")]),a._v(" GC 优化的过程")]),a._v(" "),e("h3",{attrs:{id:"监控-gc-状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监控-gc-状态"}},[a._v("#")]),a._v(" 监控 GC 状态")]),a._v(" "),e("p",[a._v("你需要监控 GC 从而检查系统中运行的 GC 的各种状态。")]),a._v(" "),e("h3",{attrs:{id:"分析监控结果后决定是否需要优化-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析监控结果后决定是否需要优化-gc"}},[a._v("#")]),a._v(" 分析监控结果后决定是否需要优化 GC")]),a._v(" "),e("p",[a._v("在检查 GC 状态后，你需要分析监控结构并决定是否需要进行 GC 优化。如果分析结果显示运行 GC 的时间只有 0.1-0.3 秒，那么就不需要把时间浪费在 GC 优化上，但如果运行 GC 的时间达到 1-3 秒，甚至大于 10 秒，那么 GC 优化将是很有必要的。但是，如果你已经分配了大约 10GB 内存给 Java，并且这些内存无法省下，那么就无法进行 GC 优化了。在进行 GC 优化之前，你需要考虑为什么你需要分配这么大的内存空间，如果你分配了 1GB 或 2GB 大小的内存并且出现了OutOfMemoryError，那你就应该执行**堆快照（heap dump）**来消除导致异常的原因。")]),a._v(" "),e("blockquote",[e("p",[a._v("注意：**堆快照（heap dump）**是一个用来检查 Java 内存中的对象和数据的内存文件。该文件可以通过执行 JDK 中的jmap命令来创建。在创建文件的过程中，所有 Java 程序都将暂停，因此，不要在系统执行过程中创建该文件。你可以在互联网上搜索 heap dump 的详细说明。")])]),a._v(" "),e("h3",{attrs:{id:"设置-gc-类型-内存大小"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置-gc-类型-内存大小"}},[a._v("#")]),a._v(" 设置 GC 类型/内存大小")]),a._v(" "),e("p",[a._v("如果你决定要进行 GC 优化，那么你需要选择一个 GC 类型并且为它设置内存大小。此时如果你有多个服务器，请如上文提到的那样，在每台机器上设置不同的 GC 参数并分析它们的区别。")]),a._v(" "),e("h3",{attrs:{id:"分析结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析结果"}},[a._v("#")]),a._v(" 分析结果")]),a._v(" "),e("p",[a._v("在设置完 GC 参数后就可以开始收集数据，请在收集至少 24 小时后再进行结果分析。如果你足够幸运，你可能会找到系统的最佳 GC 参数。如若不然，你还需要分析输出日志并检查分配的内存，然后需要通过不断调整 GC 类型/内存大小来找到系统的最佳参数。")]),a._v(" "),e("h3",{attrs:{id:"如果结果令人满意-将参数应用到所有服务器上并结束-gc-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果结果令人满意-将参数应用到所有服务器上并结束-gc-优化"}},[a._v("#")]),a._v(" 如果结果令人满意，将参数应用到所有服务器上并结束 GC 优化")]),a._v(" "),e("p",[a._v("如果 GC 优化的结果令人满意，就可以将参数应用到所有服务器上，并停止 GC 优化。")]),a._v(" "),e("p",[a._v("在下面的章节中，你将会看到上述每一步所做的具体工作。")]),a._v(" "),e("h2",{attrs:{id:"命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[a._v("#")]),a._v(" 命令")]),a._v(" "),e("h3",{attrs:{id:"jmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jmap"}},[a._v("#")]),a._v(" jmap")]),a._v(" "),e("p",[a._v("jmap 即 JVM Memory Map。")]),a._v(" "),e("p",[a._v("jmap 用于生成 heap dump 文件。如果不使用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候，自动生成 dump 文件。")]),a._v(" "),e("p",[a._v("jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jmap [option] LVMID\n")])])]),e("p",[e("strong",[a._v("option 参数：")])]),a._v(" "),e("ul",[e("li",[a._v("dump - 生成堆转储快照")]),a._v(" "),e("li",[a._v("finalizerinfo - 显示在 F-Queue 队列等待 Finalizer 线程执行 finalizer 方法的对象")]),a._v(" "),e("li",[a._v("heap - 显示 Java 堆详细信息")]),a._v(" "),e("li",[a._v("histo - 显示堆中对象的统计信息")]),a._v(" "),e("li",[a._v("permstat - to print permanent generation statistics")]),a._v(" "),e("li",[a._v("F - 当-dump 没有响应时，强制生成 dump 快照")])]),a._v(" "),e("h4",{attrs:{id:"示例-jmap-dump-pid-生成堆快照"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-jmap-dump-pid-生成堆快照"}},[a._v("#")]),a._v(" 示例：jmap -dump PID 生成堆快照")]),a._v(" "),e("p",[a._v("dump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ jmap -dump:live,format=b,file=dump.hprof 28920\nDumping heap to /home/xxx/dump.hprof ...\nHeap dump file created\n")])])]),e("p",[a._v("dump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool)打开。")]),a._v(" "),e("h4",{attrs:{id:"示例-jmap-heap-查看指定进程的堆信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-jmap-heap-查看指定进程的堆信息"}},[a._v("#")]),a._v(" 示例：jmap -heap 查看指定进程的堆信息")]),a._v(" "),e("blockquote",[e("p",[a._v("注意：使用 CMS GC 情况下，jmap -heap 的执行有可能会导致 java 进程挂起。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jmap -heap PID\n[root@chances bin]# ./jmap -heap 12379\nAttaching to process ID 12379, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 17.0-b16\n\nusing thread-local object allocation.\nParallel GC with 6 thread(s)\n\nHeap Configuration:\n   MinHeapFreeRatio = 40\n   MaxHeapFreeRatio = 70\n   MaxHeapSize      = 83886080 (80.0MB)\n   NewSize          = 1310720 (1.25MB)\n   MaxNewSize       = 17592186044415 MB\n   OldSize          = 5439488 (5.1875MB)\n   NewRatio         = 2\n   SurvivorRatio    = 8\n   PermSize         = 20971520 (20.0MB)\n   MaxPermSize      = 88080384 (84.0MB)\n\nHeap Usage:\nPS Young Generation\nEden Space:\n   capacity = 9306112 (8.875MB)\n   used     = 5375360 (5.1263427734375MB)\n   free     = 3930752 (3.7486572265625MB)\n   57.761608714788736% used\nFrom Space:\n   capacity = 9306112 (8.875MB)\n   used     = 3425240 (3.2665634155273438MB)\n   free     = 5880872 (5.608436584472656MB)\n   36.80634834397007% used\nTo Space:\n   capacity = 9306112 (8.875MB)\n   used     = 0 (0.0MB)\n   free     = 9306112 (8.875MB)\n   0.0% used\nPS Old Generation\n   capacity = 55967744 (53.375MB)\n   used     = 48354640 (46.11457824707031MB)\n   free     = 7613104 (7.2604217529296875MB)\n   86.39733629427693% used\nPS Perm Generation\n   capacity = 62062592 (59.1875MB)\n   used     = 60243112 (57.452308654785156MB)\n   free     = 1819480 (1.7351913452148438MB)\n   97.06831451706046% used\n")])])]),e("h3",{attrs:{id:"jstack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[a._v("#")]),a._v(" jstack")]),a._v(" "),e("h4",{attrs:{id:"jstack-用于生成-java-虚拟机当前时刻的线程快照。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jstack-用于生成-java-虚拟机当前时刻的线程快照。"}},[a._v("#")]),a._v(" jstack 用于生成 java 虚拟机当前时刻的线程快照。")]),a._v(" "),e("p",[a._v("线程快照是当前 java 虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。")]),a._v(" "),e("p",[a._v("线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jstack [option] LVMID\n")])])]),e("p",[e("strong",[a._v("option 参数：")])]),a._v(" "),e("ul",[e("li",[a._v("F - 当正常输出请求不被响应时，强制输出线程堆栈")]),a._v(" "),e("li",[a._v("l - 除堆栈外，显示关于锁的附加信息")]),a._v(" "),e("li",[a._v("m - 如果调用到本地方法的话，可以显示 C/C++的堆栈")])]),a._v(" "),e("h3",{attrs:{id:"jps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jps"}},[a._v("#")]),a._v(" jps")]),a._v(" "),e("p",[a._v("jps(JVM Process Status Tool)，显示指定系统内所有的 HotSpot 虚拟机进程。")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jps [options] [hostid]\n")])])]),e("p",[e("strong",[a._v("option 参数：")])]),a._v(" "),e("ul",[e("li",[a._v("l - 输出主类全名或 jar 路径")]),a._v(" "),e("li",[a._v("q - 只输出 LVMID")]),a._v(" "),e("li",[a._v("m - 输出 JVM 启动时传递给 main()的参数")]),a._v(" "),e("li",[a._v("v - 输出 JVM 启动时显示指定的 JVM 参数")])]),a._v(" "),e("p",[a._v("其中[option]、[hostid]参数也可以不写。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ jps -l -m\n28920 org.apache.catalina.startup.Bootstrap start\n11589 org.apache.catalina.startup.Bootstrap start\n25816 sun.tools.jps.Jps -l -m\n")])])]),e("h3",{attrs:{id:"jstat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jstat"}},[a._v("#")]),a._v(" jstat")]),a._v(" "),e("p",[a._v("jstat(JVM statistics Monitoring)，是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jstat [option] LVMID [interval] [count]\n")])])]),e("p",[e("strong",[a._v("参数：")])]),a._v(" "),e("ul",[e("li",[a._v("[option] - 操作参数")]),a._v(" "),e("li",[a._v("LVMID - 本地虚拟机进程 ID")]),a._v(" "),e("li",[a._v("[interval] - 连续输出的时间间隔")]),a._v(" "),e("li",[a._v("[count] - 连续输出的次数")])]),a._v(" "),e("h3",{attrs:{id:"jhat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jhat"}},[a._v("#")]),a._v(" jhat")]),a._v(" "),e("p",[a._v("jhat(JVM Heap Analysis Tool)，是与 jmap 搭配使用，用来分析 jmap 生成的 dump，jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。")]),a._v(" "),e("p",[a._v("注意：一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服务器生成的 dump 文件复制到本地或其他机器上进行分析。")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jhat [dumpfile]\n")])])]),e("h3",{attrs:{id:"jinfo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jinfo"}},[a._v("#")]),a._v(" jinfo")]),a._v(" "),e("p",[a._v("jinfo(JVM Configuration info)，用于实时查看和调整虚拟机运行参数。")]),a._v(" "),e("p",[a._v("之前的 jps -v 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令")]),a._v(" "),e("p",[e("strong",[a._v("命令格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jinfo [option] [args] LVMID\n")])])]),e("p",[e("strong",[a._v("option 参数：")])]),a._v(" "),e("ul",[e("li",[a._v("flag : 输出指定 args 参数的值")]),a._v(" "),e("li",[a._v("flags : 不需要 args 参数，输出所有 JVM 参数的值")]),a._v(" "),e("li",[a._v("sysprops : 输出系统属性，等同于 System.getProperties()")])]),a._v(" "),e("h2",{attrs:{id:"hotspot-vm-参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-vm-参数"}},[a._v("#")]),a._v(" HotSpot VM 参数")]),a._v(" "),e("blockquote",[e("p",[a._v("详细参数说明请参考官方文档："),e("a",{attrs:{href:"http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java HotSpot VM Options"),e("OutboundLink")],1),a._v("，这里仅列举常用参数")])]),a._v(" "),e("h3",{attrs:{id:"jvm-内存配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存配置"}},[a._v("#")]),a._v(" JVM 内存配置")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("参数")]),a._v(" "),e("th",[a._v("配置描述")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("-Xms")]),a._v(" "),e("td",[a._v("堆空间初始值。")])]),a._v(" "),e("tr",[e("td",[a._v("-Xmx")]),a._v(" "),e("td",[a._v("堆空间最大值。")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:NewSize")]),a._v(" "),e("td",[a._v("新生代空间初始值。")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:MaxNewSize")]),a._v(" "),e("td",[a._v("新生代空间最大值。")])]),a._v(" "),e("tr",[e("td",[a._v("-Xmn")]),a._v(" "),e("td",[a._v("新生代空间大小。")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:PermSize")]),a._v(" "),e("td",[a._v("永久代空间的初始值。")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:MaxPermSize")]),a._v(" "),e("td",[a._v("永久代空间的最大值。")])])])]),a._v(" "),e("h3",{attrs:{id:"gc-类型配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc-类型配置"}},[a._v("#")]),a._v(" GC 类型配置")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("参数")]),a._v(" "),e("th",[a._v("配置描述")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("-XX:+UseSerialGC")]),a._v(" "),e("td",[a._v("串行垃圾回收器")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:+UseParallelGC")]),a._v(" "),e("td",[a._v("并行垃圾回收器")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:+UseParNewGC")]),a._v(" "),e("td",[a._v("使用 ParNew + Serial Old 垃圾回收器组合")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:+UseConcMarkSweepGC")]),a._v(" "),e("td",[a._v("并发标记扫描垃圾回收器")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:ParallelCMSThreads=")]),a._v(" "),e("td",[a._v("并发标记扫描垃圾回收器 = 为使用的线程数量")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:+UseG1GCG1")]),a._v(" "),e("td",[a._v("垃圾回收器")])])])]),a._v(" "),e("h3",{attrs:{id:"辅助配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#辅助配置"}},[a._v("#")]),a._v(" 辅助配置")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("参数")]),a._v(" "),e("th",[a._v("配置描述")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("-XX:+PrintGCDetails")]),a._v(" "),e("td",[a._v("打印 GC 日志")])]),a._v(" "),e("tr",[e("td",[a._v("-Xloggc:"),e("filename")],1),a._v(" "),e("td",[a._v("指定 GC 日志文件名")])]),a._v(" "),e("tr",[e("td",[a._v("-XX:+HeapDumpOnOutOfMemoryError")]),a._v(" "),e("td",[a._v("内存溢出时输出堆快照文件")])])])]),a._v(" "),e("h2",{attrs:{id:"典型配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#典型配置"}},[a._v("#")]),a._v(" 典型配置")]),a._v(" "),e("h3",{attrs:{id:"堆大小设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆大小设置"}},[a._v("#")]),a._v(" 堆大小设置")]),a._v(" "),e("p",[a._v("年轻代的设置很关键。")]),a._v(" "),e("p",[e("strong",[a._v("JVM 中最大堆大小有三方面限制：")])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("相关操作系统的数据模型（32-bt 还是 64-bit）限制；")])]),a._v(" "),e("li",[e("p",[a._v("系统的可用虚拟内存限制；")])]),a._v(" "),e("li",[e("p",[a._v("系统的可用物理内存限制。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v(" 整个堆大小 = 年轻代大小 + 年老代大小 + 持久代大小\n")])])])])]),a._v(" "),e("ul",[e("li",[a._v("持久代一般固定大小为 64m。使用 -XX:PermSize 设置。")]),a._v(" "),e("li",[a._v("官方推荐年轻代占整个堆的 3/8。使用 -Xmn 设置。")])]),a._v(" "),e("h3",{attrs:{id:"回收器选择"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回收器选择"}},[a._v("#")]),a._v(" 回收器选择")]),a._v(" "),e("p",[a._v("JVM 给了三种选择：串行收集器、并行收集器、并发收集器。")]),a._v(" "),e("h2",{attrs:{id:"jvm-实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm-实战"}},[a._v("#")]),a._v(" JVM 实战")]),a._v(" "),e("h3",{attrs:{id:"获取-gc-日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-gc-日志"}},[a._v("#")]),a._v(" 获取 GC 日志")]),a._v(" "),e("p",[a._v("获取 GC 日志有两种方式：")]),a._v(" "),e("ul",[e("li",[a._v("使用命令动态查看")]),a._v(" "),e("li",[a._v("在容器中设置相关参数打印 GC 日志")])]),a._v(" "),e("p",[e("strong",[a._v("jstat -gc 统计垃圾回收堆的行为：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jstat -gc 1262\nS0C    S1C     S0U     S1U   EC       EU        OC         OU        PC       PU         YGC    YGCT    FGC    FGCT     GCT\n26112.0 24064.0 6562.5  0.0   564224.0 76274.5   434176.0   388518.3  524288.0 42724.7    320    6.417   1      0.398    6.815\n")])])]),e("p",[e("strong",[a._v("也可以设置间隔固定时间来打印：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ jstat -gc 1262 2000 20\n")])])]),e("p",[a._v("这个命令意思就是每隔 2000ms 输出 1262 的 gc 情况，一共输出 20 次")]),a._v(" "),e("p",[e("strong",[a._v("Tomcat 设置示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('JAVA_OPTS="-server -Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:SurvivorRatio=4\n-verbose:gc -Xloggc:$CATALINA_HOME/logs/gc.log\n-Djava.awt.headless=true\n-XX:+PrintGCTimeStamps -XX:+PrintGCDetails\n-Dsun.rmi.dgc.server.gcInterval=600000 -Dsun.rmi.dgc.client.gcInterval=600000\n-XX:+UseConcMarkSweepGC -XX:MaxTenuringThreshold=15"\n')])])]),e("ul",[e("li",[a._v("-Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m Xms，即为 jvm 启动时得 JVM 初始堆大小,Xmx 为 jvm 的最大堆大小，xmn 为新生代的大小，permsize 为永久代的初始大小，MaxPermSize 为永久代的最大空间。")]),a._v(" "),e("li",[a._v("-XX:SurvivorRatio=4 SurvivorRatio 为新生代空间中的 Eden 区和救助空间 Survivor 区的大小比值，默认是 8，则两个 Survivor 区与一个 Eden 区的比值为 2:8,一个 Survivor 区占整个年轻代的 1/10。调小这个参数将增大 survivor 区，让对象尽量在 survitor 区呆长一点，减少进入年老代的对象。去掉救助空间的想法是让大部分不能马上回收的数据尽快进入年老代，加快年老代的回收频率，减少年老代暴涨的可能性，这个是通过将-XX:SurvivorRatio 设置成比较大的值（比如 65536)来做到。")]),a._v(" "),e("li",[a._v("-verbose:gc -Xloggc:$CATALINA_HOME/logs/gc.log 将虚拟机每次垃圾回收的信息写到日志文件中，文件名由 file 指定，文件格式是平文件，内容和-verbose:gc 输出内容相同。")]),a._v(" "),e("li",[a._v("-Djava.awt.headless=true Headless 模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标。")]),a._v(" "),e("li",[a._v("-XX:+PrintGCTimeStamps -XX:+PrintGCDetails 设置 gc 日志的格式-Dsun.rmi.dgc.server.gcInterval=600000")]),a._v(" "),e("li",[a._v("-Dsun.rmi.dgc.client.gcInterval=600000 指定 rmi 调用时 gc 的时间间隔-XX:+UseConcMarkSweepGC -")]),a._v(" "),e("li",[a._v("-XX:MaxTenuringThreshold=15 采用并发 gc 方式，经过 15 次 minor gc 后进入年老代")])]),a._v(" "),e("h3",{attrs:{id:"如何分析-gc-日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何分析-gc-日志"}},[a._v("#")]),a._v(" 如何分析 GC 日志")]),a._v(" "),e("p",[e("strong",[a._v("Young GC 回收日志:")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("2016-07-05T10:43:18.093+0800: 25.395: [GC [PSYoungGen: 274931K->10738K(274944K)] 371093K->147186K(450048K), 0.0668480 secs] [Times: user=0.17 sys=0.08, real=0.07 secs]\n")])])]),e("p",[e("strong",[a._v("Full GC 回收日志:")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("2016-07-05T10:43:18.160+0800: 25.462: [Full GC [PSYoungGen: 10738K->0K(274944K)] [ParOldGen: 136447K->140379K(302592K)] 147186K->140379K(577536K) [PSPermGen: 85411K->85376K(171008K)], 0.6763541 secs] [Times: user=1.75 sys=0.02, real=0.68 secs]\n")])])]),e("p",[a._v("通过上面日志分析得出，PSYoungGen、ParOldGen、PSPermGen 属于 Parallel 收集器。其中 PSYoungGen 表示 gc 回收前后年轻代的内存变化；ParOldGen 表示 gc 回收前后老年代的内存变化；PSPermGen 表示 gc 回收前后永久区的内存变化。young gc 主要是针对年轻代进行内存回收比较频繁，耗时短；full gc 会对整个堆内存进行回城，耗时长，因此一般尽量减少 full gc 的次数")]),a._v(" "),e("h3",{attrs:{id:"outofmemory-oom-分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemory-oom-分析"}},[a._v("#")]),a._v(" OutOfMemory(OOM)分析")]),a._v(" "),e("p",[a._v("OutOfMemory ，即内存溢出，是一个常见的 JVM 问题。那么分析 OOM 的思路是什么呢？")]),a._v(" "),e("p",[a._v("首先，要知道有三种 OutOfMemoryError：")]),a._v(" "),e("ul",[e("li",[a._v("OutOfMemoryError:Java heap space - 堆空间溢出")]),a._v(" "),e("li",[a._v("OutOfMemoryError:PermGen space - 方法区和运行时常量池溢出")]),a._v(" "),e("li",[a._v("OutOfMemoryError:unable to create new native thread - 线程过多")])]),a._v(" "),e("h4",{attrs:{id:"outofmemoryerror-permgen-space"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-permgen-space"}},[a._v("#")]),a._v(" OutOfMemoryError:PermGen space")]),a._v(" "),e("p",[a._v("OutOfMemoryError:PermGen space 表示方法区和运行时常量池溢出。")]),a._v(" "),e("p",[e("strong",[a._v("原因：")])]),a._v(" "),e("p",[a._v("Perm 区主要用于存放 Class 和 Meta 信息的，Class 在被 Loader 时就会被放到 PermGen space，这个区域称为永久代。GC 在主程序运行期间不会对永久区进行清理，默认是 64M 大小。当程序程序中使用了大量的 jar 或 class，使 java 虚拟机装载类的空间不够，超过 64M 就会报这部分内存溢出了，需要加大内存分配，一般 128m 足够。")]),a._v(" "),e("p",[e("strong",[a._v("解决方案：")])]),a._v(" "),e("p",[a._v("（1）扩大永久代空间")]),a._v(" "),e("ul",[e("li",[a._v("JDK7 以前使用 -XX:PermSize 和 -XX:MaxPermSize 来控制永久代大小。")]),a._v(" "),e("li",[a._v("JDK8 以后把原本放在永久代的字符串常量池移出, 放在 Java 堆中(元空间 Metaspace)中，元数据并不在虚拟机中，使用的是本地的内存。使用 -XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 控制元空间大小。")])]),a._v(" "),e("blockquote",[e("p",[a._v("注意：-XX:PermSize 一般设为 64M")])]),a._v(" "),e("p",[a._v("（2）清理应用程序中 WEB-INF/lib 下的 jar，用不上的 jar 删除掉，多个应用公共的 jar 移动到 Tomcat 的 lib 目录，减少重复加载。")]),a._v(" "),e("h4",{attrs:{id:"outofmemoryerror-java-heap-space"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-java-heap-space"}},[a._v("#")]),a._v(" OutOfMemoryError:Java heap space")]),a._v(" "),e("p",[a._v("OutOfMemoryError:Java heap space 表示堆空间溢出。")]),a._v(" "),e("p",[e("strong",[a._v("原因：")])]),a._v(" "),e("p",[a._v("JVM 分配给堆内存的空间已经用满了。")]),a._v(" "),e("p",[e("strong",[a._v("问题定位：")])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("使用 jmap 或 -XX:+HeapDumpOnOutOfMemoryError 获取堆快照。")])]),a._v(" "),e("li",[e("p",[a._v("使用内存分析工具（visualvm、mat、jProfile 等）对堆快照文件进行分析。")])]),a._v(" "),e("li",[e("p",[a._v("根据分析图，重点是确认内存中的对象是否是必要的，分清究竟是是内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）。")])])]),a._v(" "),e("p",[e("strong",[a._v("内存泄露：")])]),a._v(" "),e("p",[a._v("内存泄漏是指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。")]),a._v(" "),e("p",[a._v("内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。")]),a._v(" "),e("p",[a._v("内存泄漏随着被执行的次数越多-最终会导致内存溢出。")]),a._v(" "),e("p",[a._v("而因程序死循环导致的不断创建对象-只要被执行到就会产生内存溢出。")]),a._v(" "),e("p",[a._v("内存泄漏常见几个情况：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("静态集合类")]),a._v(" "),e("ul",[e("li",[a._v("声明为静态（static）的 HashMap、Vector 等集合")]),a._v(" "),e("li",[a._v("通俗来讲 A 中有 B，当前只把 B 设置为空，A 没有设置为空，回收时 B 无法回收-因被 A 引用。")])])]),a._v(" "),e("li",[e("p",[a._v("监听器")]),a._v(" "),e("ul",[e("li",[a._v("监听器被注册后释放对象时没有删除监听器")])])]),a._v(" "),e("li",[e("p",[a._v("物理连接")]),a._v(" "),e("ul",[e("li",[a._v("DataSource.getConnection()建立链接，必须通过 close()关闭链接")])])]),a._v(" "),e("li",[e("p",[a._v("内部类和外部模块等的引用")]),a._v(" "),e("ul",[e("li",[a._v("发现它的方式同内存溢出，可再加个实时观察")]),a._v(" "),e("li",[a._v("jstat -gcutil 7362 2500 70")])])])]),a._v(" "),e("p",[e("strong",[a._v("重点关注：")])]),a._v(" "),e("ul",[e("li",[a._v("FGC — 从应用程序启动到采样时发生 Full GC 的次数。")]),a._v(" "),e("li",[a._v("FGCT — 从应用程序启动到采样时 Full GC 所用的时间（单位秒）。")]),a._v(" "),e("li",[a._v("FGC 次数越多，FGCT 所需时间越多-可非常有可能存在内存泄漏。")])]),a._v(" "),e("p",[e("strong",[a._v("解决方案：")])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("检查程序，看是否有死循环或不必要地重复创建大量对象。有则改之。")]),a._v(" "),e("p",[a._v("下面是一个重复创建内存的示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public class OOM {\n    public static void main(String[] args) {\n        Integer sum1=300000;\n        Integer sum2=400000;\n        OOM oom = new OOM();\n        System.out.println("往ArrayList中加入30w内容");\n        oom.javaHeapSpace(sum1);\n        oom.memoryTotal();\n        System.out.println("往ArrayList中加入40w内容");\n        oom.javaHeapSpace(sum2);\n        oom.memoryTotal();\n    }\n    public void javaHeapSpace(Integer sum){\n        Random random = new Random();  \n        ArrayList openList = new ArrayList();\n        for(int i=0;i<sum;i++){\n            String charOrNum = String.valueOf(random.nextInt(10));\n            openList.add(charOrNum);\n        }  \n    }\n    public void memoryTotal(){\n        Runtime run = Runtime.getRuntime();\n        long max = run.maxMemory();\n        long total = run.totalMemory();\n        long free = run.freeMemory();\n        long usable = max - total + free;\n        System.out.println("最大内存 = " + max);\n        System.out.println("已分配内存 = " + total);\n        System.out.println("已分配内存中的剩余空间 = " + free);\n        System.out.println("最大可用内存 = " + usable);\n    }\n}\n')])])]),e("p",[e("strong",[a._v("执行结果：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('往ArrayList中加入30w内容\n最大内存 = 20447232\n已分配内存 = 20447232\n已分配内存中的剩余空间 = 4032576\n最大可用内存 = 4032576\n往ArrayList中加入40w内容\nException in thread "main" java.lang.OutOfMemoryError: Java heap space\n    at java.util.Arrays.copyOf(Arrays.java:2245)\n    at java.util.Arrays.copyOf(Arrays.java:2219)\n    at java.util.ArrayList.grow(ArrayList.java:242)\n    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)\n    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)\n    at java.util.ArrayList.add(ArrayList.java:440)\n    at pers.qingqian.study.seven.OOM.javaHeapSpace(OOM.java:36)\n    at pers.qingqian.study.seven.OOM.main(OOM.java:26)\n')])])])]),a._v(" "),e("li",[e("p",[a._v("扩大堆内存空间")]),a._v(" "),e("p",[a._v("使用 -Xms 和 -Xmx 来控制堆内存空间大小。")])])]),a._v(" "),e("h4",{attrs:{id:"outofmemoryerror-gc-overhead-limit-exceeded"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-gc-overhead-limit-exceeded"}},[a._v("#")]),a._v(" OutOfMemoryError: GC overhead limit exceeded")]),a._v(" "),e("p",[e("strong",[a._v("原因：")])]),a._v(" "),e("p",[a._v("JDK6 新增错误类型，当 GC 为释放很小空间占用大量时间时抛出；一般是因为堆太小，导致异常的原因，没有足够的内存。")]),a._v(" "),e("p",[e("strong",[a._v("解决方案：")])]),a._v(" "),e("p",[a._v("查看系统是否有使用大内存的代码或死循环； 通过添加 JVM 配置，来限制使用内存：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<jvm-arg>-XX:-UseGCOverheadLimit</jvm-arg>\n")])])]),e("h4",{attrs:{id:"outofmemoryerror-unable-to-create-new-native-thread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-unable-to-create-new-native-thread"}},[a._v("#")]),a._v(" OutOfMemoryError：unable to create new native thread")]),a._v(" "),e("p",[e("strong",[a._v("原因：")])]),a._v(" "),e("p",[a._v("线程过多")]),a._v(" "),e("p",[a._v("那么能创建多少线程呢？这里有一个公式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("(MaxProcessMemory - JVMMemory - ReservedOsMemory) / (ThreadStackSize) = Number of threads  \nMaxProcessMemory 指的是一个进程的最大内存  \nJVMMemory         JVM内存  \nReservedOsMemory  保留的操作系统内存  \nThreadStackSize      线程栈的大小\n")])])]),e("p",[a._v("当发起一个线程的创建时，虚拟机会在 JVM 内存创建一个 Thread 对象同时创建一个操作系统线程，而这个系统线程的内存用的不是 JVMMemory，而是系统中剩下的内存： (MaxProcessMemory - JVMMemory - ReservedOsMemory) 结论：你给 JVM 内存越多，那么你能用来创建的系统线程的内存就会越少，越容易发生 java.lang.OutOfMemoryError: unable to create new native thread。")]),a._v(" "),e("h3",{attrs:{id:"cpu-过高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu-过高"}},[a._v("#")]),a._v(" CPU 过高")]),a._v(" "),e("p",[e("strong",[a._v("定位步骤：")])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("执行 top -c 命令，找到 cpu 最高的进程的 id")])]),a._v(" "),e("li",[e("p",[a._v("jstack PID 导出 Java 应用程序的线程堆栈信息。")]),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jstack 6795\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('"Low Memory Detector" daemon prio=10 tid=0x081465f8 nid=0x7 runnable [0x00000000..0x00000000]  \n        "CompilerThread0" daemon prio=10 tid=0x08143c58 nid=0x6 waiting on condition [0x00000000..0xfb5fd798]  \n        "Signal Dispatcher" daemon prio=10 tid=0x08142f08 nid=0x5 waiting on condition [0x00000000..0x00000000]  \n        "Finalizer" daemon prio=10 tid=0x08137ca0 nid=0x4 in Object.wait() [0xfbeed000..0xfbeeddb8]  \n\n        at java.lang.Object.wait(Native Method)  \n\n        - waiting on <0xef600848> (a java.lang.ref.ReferenceQueue$Lock)  \n\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)  \n\n        - locked <0xef600848> (a java.lang.ref.ReferenceQueue$Lock)  \n\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)  \n\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)  \n\n        "Reference Handler" daemon prio=10 tid=0x081370f0 nid=0x3 in Object.wait() [0xfbf4a000..0xfbf4aa38]  \n\n        at java.lang.Object.wait(Native Method)  \n\n        - waiting on <0xef600758> (a java.lang.ref.Reference$Lock)  \n\n        at java.lang.Object.wait(Object.java:474)  \n\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)  \n\n        - locked <0xef600758> (a java.lang.ref.Reference$Lock)  \n\n        "VM Thread" prio=10 tid=0x08134878 nid=0x2 runnable  \n\n        "VM Periodic Task Thread" prio=10 tid=0x08147768 nid=0x8 waiting on condition\n')])])]),e("p",[a._v("在打印的堆栈日志文件中，tid 和 nid 的含义：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("nid : 对应的 Linux 操作系统下的 tid 线程号，也就是前面转化的 16 进制数字\ntid: 这个应该是 jvm 的 jmm 内存规范中的唯一地址定位\n")])])]),e("p",[a._v("在 CPU 过高的情况下，查找响应的线程，一般定位都是用 nid 来定位的。而如果发生死锁之类的问题，一般用 tid 来定位。")])]),a._v(" "),e("li",[e("p",[a._v("定位 CPU 高的线程打印其 nid")]),a._v(" "),e("p",[a._v("查看线程下具体进程信息的命令如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("top -H -p 6735\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("top - 14:20:09 up 611 days,  2:56,  1 user,  load average: 13.19, 7.76, 7.82\nThreads: 6991 total,  17 running, 6974 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 90.4 us,  2.1 sy,  0.0 ni,  7.0 id,  0.0 wa,  0.0 hi,  0.4 si,  0.0 st\nKiB Mem:  32783044 total, 32505008 used,   278036 free,   120304 buffers\nKiB Swap:        0 total,        0 used,        0 free.  4497428 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n 6800 root      20   0 27.299g 0.021t   7172 S 54.7 70.1 187:55.61 java\n 6803 root      20   0 27.299g 0.021t   7172 S 54.4 70.1 187:52.59 java\n 6798 root      20   0 27.299g 0.021t   7172 S 53.7 70.1 187:55.08 java\n 6801 root      20   0 27.299g 0.021t   7172 S 53.7 70.1 187:55.25 java\n 6797 root      20   0 27.299g 0.021t   7172 S 53.1 70.1 187:52.78 java\n 6804 root      20   0 27.299g 0.021t   7172 S 53.1 70.1 187:55.76 java\n 6802 root      20   0 27.299g 0.021t   7172 S 52.1 70.1 187:54.79 java\n 6799 root      20   0 27.299g 0.021t   7172 S 51.8 70.1 187:53.36 java\n 6807 root      20   0 27.299g 0.021t   7172 S 13.6 70.1  48:58.60 java\n11014 root      20   0 27.299g 0.021t   7172 R  8.4 70.1   8:00.32 java\n10642 root      20   0 27.299g 0.021t   7172 R  6.5 70.1   6:32.06 java\n 6808 root      20   0 27.299g 0.021t   7172 S  6.1 70.1 159:08.40 java\n11315 root      20   0 27.299g 0.021t   7172 S  3.9 70.1   5:54.10 java\n12545 root      20   0 27.299g 0.021t   7172 S  3.9 70.1   6:55.48 java\n23353 root      20   0 27.299g 0.021t   7172 S  3.9 70.1   2:20.55 java\n24868 root      20   0 27.299g 0.021t   7172 S  3.9 70.1   2:12.46 java\n 9146 root      20   0 27.299g 0.021t   7172 S  3.6 70.1   7:42.72 java\n")])])]),e("p",[a._v("由此可以看出占用 CPU 较高的线程，但是这些还不高，无法直接定位到具体的类。nid 是 16 进制的，所以我们要获取线程的 16 进制 ID：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('printf "%x\\n" 6800\n输出结果:45cd\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('"catalina-exec-5692" daemon prio=10 tid=0x00007f3b05013800 nid=0x45cd waiting on condition [0x00007f3ae08e3000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000006a7800598> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2082)\n        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)\n        at org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:86)\n        at org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:32)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n')])])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);